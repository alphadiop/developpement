# -*- coding: utf-8 -*-
###################################################################################################################
#                       Create table de la base GERS                                                              #
###################################################################################################################

import os
import sys

from path import Path

from logger import LOGGER
from moteurs_stat.create_table_moteur_stat import CreateTableMoteurStatistique
from pilotage import load_moteur_stat

src_path = os.path.join(os.path.dirname(Path(os.path.abspath(__file__)).parent.parent), 'script')
print(src_path)
for rep in os.listdir(src_path):
    sys.path.append(os.path.join(src_path, rep))

from variable_environnement import get_variable_environnement
from variable_environnement import load_variable_environnement


if __name__ == '__main__':
    periodicite = 'hebdo'

    variable_environnement = load_variable_environnement()

    parameters = dict(Moteur='drop_gers', Periodicite=periodicite, Periode='')

    path_log = get_variable_environnement(variable_environnement, 'log')
    path_log = os.path.join(path_log, '', '', 'drop_base_gers', '', '')
    logger = LOGGER(parameters, path_log, type_logger="stream_file")

    moteurs_stat = load_moteur_stat(variable_environnement, periodicite, logger=logger)\
                    .drop_duplicates(subset='Table_STAT', keep="last")[['Moteur', 'Table', 'Table_STAT']]

    moteurs_stat = moteurs_stat[(moteurs_stat['Table_STAT'] != '') &
                                (moteurs_stat['Table_STAT'].str.startswith('[GERS]'))]

    for row in moteurs_stat.iterrows():
        parameters = {'Moteur': row[1]['Moteur'], 'Table': row[1]['Table'], 'Periodicite': periodicite}
        print(parameters)
        CreateTableMoteurStatistique(parameters).run()
