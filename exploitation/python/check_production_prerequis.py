# -*- coding: utf-8 -*-
###################################################################################################################
#                       VÃ©rification des prerequis des l'ensemble des moteurs_locales                                     #
###################################################################################################################

import os
import sys

from path import Path

from sql_connexion import get_sql_operations

src_path = os.path.join(os.path.dirname(Path(os.path.abspath(__file__)).parent.parent), 'script')
print(src_path)
for rep in os.listdir(src_path):
    sys.path.append(os.path.join(src_path, rep))

from variable_environnement import load_variable_environnement
from variable_environnement import get_variable_environnement
from pilotage import load_arbre, load_moteurs_stat
from pilotage import load_prerequis
from prerequis_moteur_statistique import validation_data_figees
from prerequis_moteur_statistique import validation_sql_moteur_statistique
from logger import LOGGER
from tabulate_dataframe import tabulate_dataframe


if __name__ == '__main__':
    parameters = dict(Periodicite='hebdo', Periode='202211', IsProduction=True, PeriodeProduction='202211')

    variable_environnement = load_variable_environnement()

    path_log = get_variable_environnement(variable_environnement, 'log')
    path_log = os.path.join(path_log, 'check_production_prerequis', parameters['Periodicite'], '')
    parameters_log = dict(Moteur='check_production_prerequis', Periodicite=parameters['Periodicite'], Periode=parameters['Periode'])
    logger = LOGGER(parameters_log, path_log, type_logger="stream_file")

    sql_operations = get_sql_operations(logger=logger)

    arbre_production = load_arbre(parameters['Periodicite'], logger=logger)

    moteurs_stats = load_moteurs_stat(variable_environnement, logger=logger)

    data_figees = load_prerequis(variable_environnement, parameters['Periodicite'], 'data_figees', logger=logger)
    data_moteur_statistique = load_prerequis(variable_environnement, parameters['Periodicite'], 'data_moteur_statistique', logger=logger)
    sql_moteur_statistique = load_prerequis(variable_environnement, parameters['Periodicite'], 'sql_moteur_statistique', logger=logger)

    for level in sorted(arbre_production.keys()):
        for moteur in arbre_production[level]:
            logger.info(f'Level: {level} - Moteur: {moteur}')
            parameters_moteurs = parameters.copy()
            parameters_moteurs['Moteur'] = moteur
            df_data_figees = validation_data_figees(variable_environnement, parameters_moteurs, logger)
            if df_data_figees is not None:
                logger.info(f"\n{tabulate_dataframe(df_data_figees)}")

            df_sql_moteurs = validation_sql_moteur_statistique(sql_operations, variable_environnement, moteurs_stats,
                                                               parameters_moteurs, logger)
            if df_sql_moteurs is not None:
                for df in df_sql_moteurs.values():
                    logger.info(f"\n{tabulate_dataframe(df)}")




