# -*- coding: utf-8 -*-
"""
    Calcul des matrices de travelling: repart_prescripteur_hopital hebdomadaire
"""
import os
import sys

from path import Path

src_path = os.path.join(os.path.dirname(Path(os.path.abspath(__file__)).parent.parent), 'script')
for rep in os.listdir(src_path):
    sys.path.append(os.path.join(src_path, rep))

from read_parameters import read_parameters
from sql_connexion import get_sql_operations
from time_periodes import get_semaines, get_mois
from travelling import TRAVELLING

if __name__ == '__main__':
    # parameters = {'Moteur': 'travelling_uga', 'Table': 'travelling_uga_produit_uga', 'Periodicite': 'hebdo', 'PeriodeDebut': '201601', 'PeriodeFin': '201601'}

    parameters = read_parameters(sys.argv)

    moteur, table, periodicite = parameters['Moteur'], parameters['Table'], parameters['Periodicite']
    periode_debut, periode_fin = parameters['PeriodeDebut'], parameters['PeriodeFin']

    sql_operations = get_sql_operations()
    periodes = (get_semaines(sql_operations, periode_debut, periode_fin) if periodicite == 'hebdo'
                else get_mois(sql_operations, periode_debut, periode_fin))

    print('')
    print('Moteur     : ' + moteur)
    print('Table      :' + table)
    print('Periodicite: ' + periodicite)
    print('Periodes   : ' + ", ".join(periodes))
    print('')

    for periode in periodes:
        parameters = dict(Moteur=moteur, Periodicite=periodicite, Periode=periode)
        print(f'Parameters: {parameters}')

        # Initialisation class TRAVELLING
        travelling = TRAVELLING(parameters)

        travelling.verification_prerequis()

        travelling.load_data()
        profondeur_historique = travelling.profondeur_historique_rfsotc()
        travelling.chargement_rfsotc_tables(profondeur_historique)
        travelling.union_rfsotc_table(profondeur_historique, 'Small')
        travelling.build_rfsotc()
        travelling.build_rfsotc_produit('#rfsotc_travelling')

        if travelling.etude_parameters['Moteur'] in travelling.table_travelling.keys():
            # --> Niveau Produit
            travelling.compute_travelling_uga(True)
            travelling.compute_travelling_departement(True)
            travelling.compute_travelling_france(True)
        else:
            travelling.union_rfsotc_table(profondeur_historique, 'Large')
            travelling.build_rfsotc_produit('#rfsotc_update_extended')
            travelling.compute_travelling_etablissement(True)
