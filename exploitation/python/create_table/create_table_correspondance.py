# -*- coding: utf-8 -*-
"""
  Cr√©ation des tables de correspondance entre les tables de la base STAT sur SQL07 et la base DW_GersIt sur SQL06
"""

import math
import os

from logger import LOGGER
from read import read_csv
from sql_connexion import get_sql_operations
from sql_schema import get_columns_from_schema
from sql_schema import get_schema_from_json
from variable_environnement import get_variable_environnement
from variable_environnement import load_variable_environnement

variable_environnement = load_variable_environnement()

path_pilotage = get_variable_environnement(variable_environnement, 'pilotage')
path_log = get_variable_environnement(variable_environnement, 'log')
path_schema = get_variable_environnement(variable_environnement, 'schema')

etude_parameters = dict(Moteur='table_correspondance', Periodicite='', Periode='')
path_log = os.path.join(path_log, '', etude_parameters['Moteur'], '', '')
logger = LOGGER(etude_parameters, path_log, type_logger="stream_file")

schema = get_schema_from_json(path_schema, 'correspondance_stat_gersit', logger=logger)
columns = get_columns_from_schema(schema, logger=logger)

sql_operations = get_sql_operations(logger=logger)

table_dw = '[PRODUCTION].[prod].[CorrespondanceStatGersIt]'
sql_operations.create_table(table_dw, schema)

df_correspondance = read_csv(os.path.join(path_pilotage, 'chargement', 'correspondance_stat_gersit.csv'),
                             dtype={column: str for column in columns})

for index, row in df_correspondance.iterrows():
    dic_row = row.to_dict()
    for column in ['VersionSource', 'Priorite', 'CleTraitement']:
        if isinstance(dic_row[column], float):
            if math.isnan(dic_row[column]):
                dic_row[column] = 'NULL'

    sql_operations.insert_values(dic_row, table_dw, schema)

sql_operations.connexion.close()
