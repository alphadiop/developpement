conda activate Reservation
cd "repertoire"
django-admin startproject reservation
cd mysite
python manage.py startapp menu 
python manage.py startapp vtc
python manage.py runserver  


===========Ajouter l'application dans setting ===================================================
0. position : reservation/menu
1. recuperer "MenuConfig" dans apps.py
2. ajouter "menu.apps.MenuConfig" dans reservation/setting.py
==================================================================================================



==== model ======================================================================================
== construire le model via le fichier models.py
== appliquer le model à la base de données par le système de migration
python manage.py makemigrations
python manage.py makemigrations : detecter les changements et generer le fichier 0001_initial.py
python manage.py migrate : appliquer les changement dans la base de données
python manage.py migrate
==================================================================================================



===Interface Admin ==============================================================================
un projet peut avoir plusieurs applications
projet django : reservation
position:reservation
python manage.py createsuperuser
compte : alphadiop
email : alphadiop@gmail.com
password : admin
==================================================================================================


================Faut ajouter le model creer dans admin ==========================================
projet django:reservation
models : Booking
position:reservation/menu/admin.py
from .models import Booking
admin.site.register(Booking)
==================================================================================================


=================================================================================================
taper sur google : django change language
reponse : 'django.middleware.locale.LocaleMiddleware'
aller dans reservation/setting.py mettre reponse
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
================================================================================================


================= CREER UNE VUE=================================================================
======== reservation/menu/views.py
def index(request):
    return HttpResponse("les clients")


================================================================================================
========== Lire des objets de la base de données ===============================================
faut importer le model vers la vue
from .import models
================================================================================================




================================================================================================
========== utilsation de template dans la vue ==================================================
================================================================================================




================================================================================================
========== adapter l'image à la fénêtre ========================================================
========= css body background adapt screen =====================================================
================================================================================================


taxi driver
https://github.com/rijish45/Rover-Taxi-App/blob/master/web-app/pages/models.py





https://www.stanleyulili.com/django/how-to-install-django-on-windows/
https://openclassrooms.com/fr/courses/4425076-decouvrez-le-framework-django/4631113-ajoutez-une-vue
https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#built-in-filter-reference
https://www.tutorialspoint.com/django/django_generic_views.htm
https://www.tutorialspoint.com
https://www.django-rest-framework.org/
https://realpython.com/micropython/
https://realpython.com/data-engineer-interview-questions-python/
https://realpython.com/learning-paths/python-interview/
https://realpython.com/python-virtual-environments-a-primer/
https://realpython.com/flask-by-example-part-3-text-processing-with-requests-beautifulsoup-nltk/
https://realpython.com/django-flashcards-app/
https://realpython.com/tutorials/web-dev/
https://realpython.com/pycharm-guide/
https://www.smashingmagazine.com/2021/11/guide-modern-css-colors/
https://realpython.com/python-concurrency/#asyncio-version
https://realpython.com/python-application-layouts/
https://realpython.com/python-logging/
https://www.fullstackpython.com/
https://realpython.com/python-git-github-intro/
https://www.kdnuggets.com/2022/07/parallel-processing-large-file-python.html
https://realpython.com/working-with-files-in-python/
https://realpython.com/working-with-files-in-python/
https://www.pythoniste.fr/python/celery/distribuer-des-taches-en-python-avec-celery/
https://realpython.com/python-testing/
https://guicommits-com.cdn.ampproject.org/c/s/guicommits.com/organize-python-code-like-a-pro/amp/
https://realpython.com/python-interface/
https://realpython.com/learning-paths/writing-pythonic-code/
https://realpython.com/the-most-diabolical-python-antipattern/
https://realpython.com/tic-tac-toe-python/
https://realpython.com/python-continuous-integration/
https://realpython.com/github-copilot-python/


pip install -r ./requirements.txt

-------------------------------Liste variables environnement sur Python------------------------------------
conda info --envs
conda info -e      # or 
conda env list

------------------------------------------------------------------------------------------------------------
activate developpement


-------------------------------------------------------------------------------------------------------------
conda create -n django_project anaconda

python -m venv django_project
activate django_project
activate dasboards
deactivate
\dasboards
pip freeze > requirements.txt # créer une fichier de besoins qui contient la liste de tous les packages installés  dans le  virtualenv courant 

python -m venv venv
activate venv
pip install -r ../python-workspace/mon-env-req.txt # installer tous les  packages indiqués dans 'mon-env-req.txt'
# attention au chemin

-------------------------------------------Desinstaller un module python----------------------------------
pip uninstall sqlalchemy # désinstaller tous les  packages 'sqlalchemy'
pip uninstall async-generator # désinstaller tous les  packages 'sqlalchemy'
pip uninstall nest-asyncio


--------------------------------------------------------------------------------------------------------
cd C:\Users\alpha\OneDrive\PROJET_DJANGO
venv\Scripts\activate
cd dasboards
python manage.py runserver
python manage.py makemigrations cards
python manage.py migrate
python manage.py migrate
python manage.py dbshell

python manage.py shell

from cards.models import Card
c1 = Card(question="Hello", answer="Hola")
c1.save()

c2 = Card(question="Please", answer="Por favor")
c2.save()

c3 = Card(question="Sorry", answer="Lo siento", box=2)
c3.save()

Card.objects.all()






------------------Django sur windows avec PowerShell----------------------------------------------------
1.open powershell
2.Verifying Python Installation : python -V
3.version de pip : pip3 --version
4.Upgrading Pip : python -m pip install --upgrade pip
4.Upgrading Pip : python -m pip install --upgrade pip
5.Creating a Project Directory : cd C:\Users\alpha\OneDrive\PROJET_DJANGO
6.Creating the Virtual Environment : python -m venv venv
7.ls
8.Activating the Virtual Environment : venv\Scripts\activate
!!!! open PowerShell admin window to change the execution policy:set-executionpolicy remotesigned

Now that you’ve activated the virtual environment for your project, 
the moment you’ve been waiting for is here. It’s time to install Django

9.Installing Django : pip install django ou pip install django==3.1
9.pip upgrade package : pip install Django -U
to verify that Django has been installed : django-admin --version ou python -m django --version
--------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
10.Creating the Django Project : django-admin startproject dasboards
11. cd dasboards
12.Running the Development Server : python manage.py runserver
vsite : http://127.0.0.1:8000/
-----------------------------------------------------------------------------------------------------


-----Creating the polls app---------------------------------------------------------------------------
!!!!To create your app, make sure you’re in the same directory as manage.py and type this command

Projects vs. apps

What’s the difference between a project and an app? 
An app is a Web application that does something – example, 
a Weblog system, a database of public records or a small poll app. 
A project is a collection of configuration and apps for a particular website. 
A project can contain multiple apps. 
An app can be in multiple projects.
-----------------------------------------------------------------------
!!!!To create your app, make sure you’re in the same directory as manage.py and type this command

To create your app : python manage.py startapp polls

---------------------------------------------------------------------------------------------------
cd C:\Users\alpha\OneDrive\PROJET_DJANGO
venv\Scripts\activate
cd dasboards
Run => python manage.py startapp polls : To create your app
Run => python manage.py migrate : to apply those changes to the database.
Run => python manage.py makemigrations polls : to create migrations for those changes
Run => python manage.py sqlmigrate polls 0001 : command takes migration names and returns their SQL
-----------------------------------------------------------------------------------------------------
python manage.py makemigrations

--------------Creating an admin user-----------------------------------------------------------------
python manage.py createsuperuser
Username:alpha
Paword: admin
Email address: alphadiop@gmail.com
------------------------------------------------------------------------------------------------------


--------------test------------------------------------------------------------------------------------
python manage.py runserver
http://127.0.0.1:8000/admin/.
------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------
pip install --upgrade <library_name>
------------------------------------------------------------------------------------------------------
import pkg_resources
from subprocess import call
dir(pkg_resources)
packages = [dist.project_name for dist in pkg_resources.working_set]
call("pip install --upgrade " + ' '.join(packages), shell=True
----------------------------------------------------------------------------------------------
you can list the packages installed within that venv by doing : pip freeze
----------------------------------------------------------------------------------------------
conda create -n your_environment_name
conda env list
conda activate your_environment_name
conda deactivate
--------------------------------------------------------------------------------------------------------
store all the pip packages in requirements.txt : python -m pip freeze > requirements.txt
remove all pip packages which menetioned in requirements.txt : python -m pip uninstall -r requirements.txt

---------------------------------------------------------------------------------------------------------
python manage.py runserver --version
pip show django
pip show tensorflow
--------------------------------------------------------------------------------------------------------

#vérification 
~ python
~ import django
~ print(django.get_version())
~ python -m django --version

~ cd C:\Users\alpha\OneDrive\PROJET_DJANGO
~ django-admin startproject MyWebsite

C:\Users\alpha\OneDrive\PROJET_DJANGO\MyWebsite
MyWebsite/ : 'ce nom peut être modifié sans risque pour django'
    manage.py : 'utilitaire en ligne de commande'
    MyWebsite/ : 'C’est le nom du paquet Python que vous devrez utiliser pour importer ce qu 'il contient (par ex. MyWebsite.urls)'
        __init__.py : 'un fichier vide qui indique à Python que ce répertoire doit être considéré comme un paquet'
        settings.py : réglages et configuration de ce projet Django : https://docs.djangoproject.com/fr/3.2/topics/settings/
        urls.py : "les déclarations des URL de ce projet Django, une sorte de « table des matières » de votre site Django" :https://docs.djangoproject.com/fr/3.2/topics/http/urls/
        asgi.py : "un point d’entrée pour les serveurs Web compatibles aSGI pour déployer votre projet" : https://docs.djangoproject.com/fr/3.2/howto/deployment/asgi/
        wsgi.py : "un point d’entrée pour les serveurs Web compatibles WSGI pour déployer votre projet" : https://docs.djangoproject.com/fr/3.2/howto/deployment/wsgi/


Le serveur de développement
Vérifions que votre projet Django fonctionne. 
Déplacez-vous dans le répertoire \MyWebsite et lancez les commandes suivantes : python manage.py runserver

~ cd MyWebsite
~ python manage.py runserver

c'est le démarrage du serveur de développement de Django
allez à l’adresse http://127.0.0.1:8000 avec votre navigateur Web
Par défaut, la commande runserver démarre le serveur de développement sur l’IP interne sur le port 8000.

Si vous voulez changer l’IP
python manage.py runserver 8080
documentation : https://docs.djangoproject.com/fr/3.2/ref/django-admin/#django-admin-runserver


Création de l’application sondage
Chaque application que vous écrivez avec Django est en fait un paquet Python qui respecte certaines conventions. 
Django est livré avec un utilitaire qui génère automatiquement la structure des répertoires de base d’une application, 
ce qui vous permet de vous concentrer sur l’écriture du code, plutôt que sur la création de répertoires

Quelle est la différence entre un projet et une application ? 
Une application est une application Web qui fait quelque chose – 
par exemple un système de blog, une base de données publique ou une petite application de sondage. 
Un projet est un ensemble de réglages et d’applications pour un site Web particulier. 
Un projet peut contenir plusieurs applications. Une application peut apparaître dans plusieurs projets

nous allons créer une application de sondage dans le même dossier que le fichier manage.py 
pour qu’elle puisse être importée comme module de premier niveau plutôt que comme sous-module de MyWebsite.

Pour créer votre application, assurez-vous d’être dans le même répertoire que manage.py et saisissez cette commande :
python manage.py startapp sondage

~ CTR -C
~ cd C:\Users\alpha\OneDrive\PROJET_DJANGO\MyWebsite
~ python manage.py startapp sondage

Cela va créer un répertoire sondage qui est structuré de la façon suivante :
sondage/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

Écriture d’une première vue
Ouvrez le fichier sondage/views.py et placez-y le code Python suivant :

from django.http import HttpResponse
def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

C’est la vue Django la plus simple possible. Pour appeler cette vue, il s’agit de l’associer à une URL, et pour cela nous avons besoin d’un URLconf.
Pour créer un URLconf dans le répertoire sondage, créez un fichier nommé urls.py. 
Votre répertoire d’application devrait maintenant

sondage/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py

Dans le fichier sondage/urls.py, insérez le code suivant :

from django.urls import path
from . import views
urlpatterns = [
    path('', views.index, name='index'),
]


L'étape suivante est de faire pointer la configuration d'URL racine vers le module sondage.urls. 
Dans MyWebsite/urls.py, ajoutez une importation django.urls.include et insérez un appel include() dans la liste urlpatterns, ce qui donnera :

monsite/urls.py
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('sondage/', include('sondage.urls')),
    path('admin/', admin.site.urls),
]

Ouvrez http://localhost:8000/sondage/ dans votre navigateur et vous devriez voir le texte « Hello, world. You’re at the sondage index. » qui a été défini dans la vue index.
http://localhost:8000/sondage/

La fonction path() reçoit quatre paramètres, 
dont deux sont obligatoires : route et view, 
et deux facultatifs : kwargs et name. 
À ce stade, il est intéressant d’examiner le rôle de chacun de ces paramètres.
path(route, view, kwargs=None, name=None)
https://docs.djangoproject.com/fr/3.2/intro/tutorial01/


Distribution des URL
Processus de traitement des requêtes par Django
Convertisseurs de chemin
Inscription de convertisseurs de chemin personnalisés
Utilisation d’expressions régulières


Les réglages de Django
Configuration de la base de données
MyWebsite/settings.py

~ python manage.py migrate : permet de créer des tables dans les bases de données des applications installées par défaut
Exemple d'application installée par défaut : django.contrib.admin voir liste INSTALLED_APPS 

Création des modèles
"""C:\Users\alpha\OneDrive\PROJET_DJANGO\MyWebsite\sondage\apps.py
on se situe ici : C:\Users\alpha\OneDrive\PROJET_DJANGO\MyWebsite
le module apps.py contient la class : SondageConfig
donc le chémin est : sondage.apps.SondageConfig

La classe PollsConfig se trouve dans le fichier Sondage/apps.py, 
ce qui signifie que son chemin pointé est 'Sondage.apps.PollsConfig'
NomDossier.NomModule.NomClasse.NomMéthode(argument)"""
Activation des modèles
~ python manage.py makemigrations sondage : indique à Django que des changements sont à effectuer 
	sur les modèles et que ces changements sont stockés sous forme de migrations

sondage/migrations/0001_initial.py : les résulats sont ici

python manage.py sqlmigrate sondage 0001

python manage.py migrate


La commande migrate sélectionne toutes les migrations qui n’ont pas été appliquées 
(Django garde la trace des migrations appliquées en utilisant une table spéciale dans la base de données : django_migrations) 
puis les exécute dans la base de données, ce qui consiste essentiellement 
à synchroniser les changements des modèles avec le schéma de la base de données.
Les migrations sont très puissantes et permettent de gérer les changements de modèles 
dans le temps, au cours du développement d’un projet, sans devoir supprimer 
la base de données ou ses tables et en refaire de nouvelles. 
Une migration s’attache à mettre à jour la base de données en live, 
sans perte de données. Nous les aborderons plus en détails dans une partie ultérieure de ce didacticiel, 
mais pour l’instant, retenez le guide en trois étapes pour effectuer des modifications aux modèles :

Modifiez les modèles (dans models.py).
Exécutez python manage.py makemigrations pour créer des migrations correspondant à ces changements.
Exécutez python manage.py migrate pour appliquer ces modifications à la base de données.
La raison de séparer les commandes pour créer et appliquer les migrations est 
que celles-ci vont être ajoutées dans votre système de gestion de versions 
et qu’elles seront livrées avec l’application ; 
elles ne font pas que faciliter le développement, elles sont également exploitables par d’autres développeurs ou en production.

Lisez la documentation de django-admin pour avoir toutes les informations sur ce que manage.py peut faire


python manage.py shell : vous avez la main
from sondage.models import Choice, Question
dans le module /sondage/models.py on a les classes : Choice, Question

from django.utils import timezone
q = Question(question_text="What's new?", pub_date=timezone.now())
q.save()
q.id
q.question_text
q.pub_date


Introduction au site d’administration de Django

Création d’un utilisateur administrateur

python manage.py createsuperuser :  créer un utilisateur qui peut se connecter au site d’administration

Username : admin
Email address : alphadiop@gmail.com
Password : diop

python manage.py runserver
Entrée dans le site d’administration

Rendre l’application de sondage modifiable via l’interface d’admin



Dans Django, les pages Web et les autres contenus sont générés par des vues. 
Chaque vue est représentée par une fonction Python (ou une méthode dans le cas des vues basées sur des classes). 
Django choisit une vue en examinant l’URL demandée (pour être précis, la partie de l’URL après le nom de domaine).

Les gabarits dans Django
La fonction render() prend comme : 
	premier paramètre l’objet requête, 
	un nom de gabarit comme deuxième paramètre 
	et un dictionnaire comme troisième paramètre facultatif. 
Elle retourne un objet HttpResponse composé par le gabarit interprété avec le contexte donné.

quelques fontions
render(request, template_name, context=None, content_type=None, status=None, using=None)


L’utilisation de method="post" (par opposition à method="get") est très importante, puisque le fait de valider 
ce formulaire va entraîner des modifications de données sur le serveur. 
À chaque fois qu’un formulaire modifie des données sur le serveur, vous devez utiliser method="post". 
Cela ne concerne pas uniquement Django ; c’est une bonne pratique à adopter en tant que développeur Web


'--------------------------------------------------------------------------------------------------------------------------------------
Exemple de Module python ou paquet : C:\Users\alpha\OneDrive\PROJET_PYTHON\ExempleModule
Un module est un fichier qui contient des fonctions : fibo.py
Taper cd C:\Users\alpha\OneDrive\PROJET_PYTHON\ExempleModule
Taper python

Taper import fibo ou 
Taper from fibo import fib, fib2 ou
Taper from fibo import *
Taper import fibo as fib

Taper fibo.fib(1000)
fibo.__name__ pour obtenir le nom du module
Taper fib = fibo.fib
Taper fib(500)

import fibo, sys
dir(fibo)
dir(sys) 
'----------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------
-------------------Les réglages de Django--------------------------------------------------------------------------------------------

To create Python virtual environment
pip install virtualenv
creer le dossier mysite_project
placez vous dans : 
C:\Users\alpha\OneDrive\PROJET_DJANGO\mysite_project
taper la commande : virtualenv env_mysite
taper la commande : env_mysite\Scripts\activate
taper la commande : pip install django==1.11.2
taper python pour voir
importlib.reload()

commencer le projet
Make sure you are in the : mysite_project directory

----------------------------------------------------------------------------------------------------------------------------------
pip freeze
python -m pip install -U Django
python -m pip install --upgrade SomePackage
python -m pip install -U pip

python -m django --version
django-admin startproject monsite
cd monsite
django-admin startapp news

python manage.py makemigrations
python manage.py migrate

'store.news.StoreConfig',
python manage.py runserver

pip install django-debug-toolbar

INSTALLED_APPS = [
    # ...
    'django.contrib.staticfiles',
    'debug_toolbar',
]

protocole HTTP



----------------------------------------------------------------------------------------------------------------
import  os
imprimer(os. getcwd())

imprimer(os. listdir(os. getcwd())

https://python.doctor/page-editeurs-python-gratuits-payants-ide 
Editeur de texte
PyCharm est le meilleur IDE tout simplement. 
Sa version gratuite est 

python manage.py makemigrations
python manage.py migrate

from news.models import Article, Reporter
Reporter.objects.all()
r = Reporter(full_name='John Smith')
r.save()
r.full_name
Reporter.objects.get(id=1)
Reporter.objects.get(id=2)
Reporter.objects.get(full_name__startswith='John')
Reporter.objects.get(full_name__contains='mith')



from datetime import date
a = Article(pub_date=date.today(), headline='Django is cool',content='Yeah.', reporter=r)
a.save()


-----------------------------------------------------
#https://www.kite.com/python/answers/how-to-specify-a-csv-delimiter-in-python
#!/usr/bin/python
import sqlite3
import pandas as pd
conn = sqlite3.connect('C:\\Users\\alpha\\OneDrive\\PROJET_DJANGO\\dasboards\\db.sqlite3')
cursor = conn.cursor()
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
print(cursor.fetchall())

#print("Opened database successfully")
#cursor = conn.execute("SELECT question_text, pub_date from Question")

#print "Operation done successfully";
conn.close()
-----------------------------------------------------


#liste des tables presentes dans la base de données
import pandas as pd
import sqlite3
base_donnes = "C:\\Users\\alpha\\OneDrive\\PROJET_DJANGO\\dasboards\\db.sqlite3"
conn = sqlite3.connect(base_donnes)
table = pd.read_sql_query("SELECT name FROM sqlite_master WHERE type='table'", conn)
print(table)



#liste des champs de la base de donnée
base_donnes = "C:\\Users\\alpha\\OneDrive\\PROJET_DJANGO\\dasboards\\db.sqlite3"
con = sqlite3.connect(base_donnes)
cursor = con.cursor()
cursor.execute("PRAGMA table_info(polls_question);")
print(cursor.fetchall())




#Inserer des données dans la base de données
base_donnes = "C:\\Users\\alpha\\OneDrive\\PROJET_DJANGO\\dasboards\\db.sqlite3"
def insert_into(id,question_text, pub_date):
  try:
    conn = sqlite3.connect(base_donnes)
    cur = conn.cursor()
    print("Connexion réussie à SQLite")
    sql = "INSERT INTO polls_question (id,question_text, pub_date) VALUES (?,?,?)"
    value = (id,question_text, pub_date)
    cur.execute(sql, value)
    conn.commit()
    print("Enregistrement inséré avec succès dans la table polls_question")
    cur.close()
    conn.close()
    print("Connexion SQLite est fermée")
  except sqlite3.Error as error:
    print("Erreur lors de l'insertion dans la table polls_question", error)
insert_into(1,'What up ?', '2022-05-11')
insert_into(2,'What now ?', '2022-05-11')



base_donnes = "C:\\Users\\alpha\\OneDrive\\PROJET_DJANGO\\dasboards\\db.sqlite3"
fichier_csv = "D:\\data\\Base django\\"
def to_csv():
    db = sqlite3.connect(base_donnes)
    cursor = db.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    for table_name in tables:
        table_name = table_name[0]
        table = pd.read_sql_query("SELECT * from %s" % table_name, db)
        table.to_csv(fichier_csv + table_name + '.csv', index_label='index')
    cursor.close()
    db.close()
#to_csv()



fichier_csv = "D:\\data\\Base django\\base.csv"
file_object = open(fichier_csv, "r")
csv = csv.reader(file_object, delimiter = ",")
for row in csv:
  print(row)



#afficher le contenu de la table
import sqlite3
base_donnes = "C:\\Users\\alpha\\OneDrive\\PROJET_DJANGO\\dasboards\\db.sqlite3"
conn = sqlite3.connect(base_donnes)
c = conn.cursor()
c.execute('''SELECT * FROM polls_question;''')
rows = c.fetchall()
for row in rows:
	print(row)
			 
#commit the changes to db			
conn.commit()
#close the connection
conn.close()




import csv
base_donnes = "C:\\Users\\alpha\\OneDrive\\PROJET_DJANGO\\dasboards\\db.sqlite3"
fichier_csv = "D:\\data\\Base django\\base.csv"

conn = sqlite3.connect(base_donnes)
c = conn.cursor()

#c.execute('''CREATE TABLE polls_question (id int, question_text text,pub_date date)''')

#Load CSV file into sqlite table
# load the data into a Pandas DataFrame
polls_question = pd.read_csv(fichier_csv)
# write the data to a sqlite table
polls_question.to_sql('polls_question', conn, if_exists='append', index = False)
con.close()



